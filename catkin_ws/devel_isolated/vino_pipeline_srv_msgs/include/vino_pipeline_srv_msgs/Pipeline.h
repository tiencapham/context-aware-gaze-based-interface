// Generated by gencpp from file vino_pipeline_srv_msgs/Pipeline.msg
// DO NOT EDIT!


#ifndef VINO_PIPELINE_SRV_MSGS_MESSAGE_PIPELINE_H
#define VINO_PIPELINE_SRV_MSGS_MESSAGE_PIPELINE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vino_pipeline_srv_msgs
{
template <class ContainerAllocator>
struct Pipeline_
{
  typedef Pipeline_<ContainerAllocator> Type;

  Pipeline_()
    : input()
    , output()  {
    }
  Pipeline_(const ContainerAllocator& _alloc)
    : input(_alloc)
    , output(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _input_type;
  _input_type input;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _output_type;
  _output_type output;





  typedef boost::shared_ptr< ::vino_pipeline_srv_msgs::Pipeline_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vino_pipeline_srv_msgs::Pipeline_<ContainerAllocator> const> ConstPtr;

}; // struct Pipeline_

typedef ::vino_pipeline_srv_msgs::Pipeline_<std::allocator<void> > Pipeline;

typedef boost::shared_ptr< ::vino_pipeline_srv_msgs::Pipeline > PipelinePtr;
typedef boost::shared_ptr< ::vino_pipeline_srv_msgs::Pipeline const> PipelineConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vino_pipeline_srv_msgs::Pipeline_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vino_pipeline_srv_msgs::Pipeline_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vino_pipeline_srv_msgs::Pipeline_<ContainerAllocator1> & lhs, const ::vino_pipeline_srv_msgs::Pipeline_<ContainerAllocator2> & rhs)
{
  return lhs.input == rhs.input &&
    lhs.output == rhs.output;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vino_pipeline_srv_msgs::Pipeline_<ContainerAllocator1> & lhs, const ::vino_pipeline_srv_msgs::Pipeline_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vino_pipeline_srv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vino_pipeline_srv_msgs::Pipeline_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vino_pipeline_srv_msgs::Pipeline_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vino_pipeline_srv_msgs::Pipeline_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vino_pipeline_srv_msgs::Pipeline_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vino_pipeline_srv_msgs::Pipeline_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vino_pipeline_srv_msgs::Pipeline_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vino_pipeline_srv_msgs::Pipeline_<ContainerAllocator> >
{
  static const char* value()
  {
    return "64b3f45a8c54441324c2fb32649123fc";
  }

  static const char* value(const ::vino_pipeline_srv_msgs::Pipeline_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x64b3f45a8c544413ULL;
  static const uint64_t static_value2 = 0x24c2fb32649123fcULL;
};

template<class ContainerAllocator>
struct DataType< ::vino_pipeline_srv_msgs::Pipeline_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vino_pipeline_srv_msgs/Pipeline";
  }

  static const char* value(const ::vino_pipeline_srv_msgs::Pipeline_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vino_pipeline_srv_msgs::Pipeline_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Copyright (c) 2018 Intel Corporation\n"
"#\n"
"# Licensed under the Apache License, Version 2.0 (the \"License\");\n"
"# you may not use this file except in compliance with the License.\n"
"# You may obtain a copy of the License at\n"
"#\n"
"#      http://www.apache.org/licenses/LICENSE-2.0\n"
"#\n"
"# Unless required by applicable law or agreed to in writing, software\n"
"# distributed under the License is distributed on an \"AS IS\" BASIS,\n"
"# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
"# See the License for the specific language governing permissions and\n"
"# limitations under the License.\n"
"                      \n"
"string input                        # From\n"
"string output                       # To\n"
;
  }

  static const char* value(const ::vino_pipeline_srv_msgs::Pipeline_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vino_pipeline_srv_msgs::Pipeline_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.input);
      stream.next(m.output);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Pipeline_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vino_pipeline_srv_msgs::Pipeline_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vino_pipeline_srv_msgs::Pipeline_<ContainerAllocator>& v)
  {
    s << indent << "input: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.input);
    s << indent << "output: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.output);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VINO_PIPELINE_SRV_MSGS_MESSAGE_PIPELINE_H
