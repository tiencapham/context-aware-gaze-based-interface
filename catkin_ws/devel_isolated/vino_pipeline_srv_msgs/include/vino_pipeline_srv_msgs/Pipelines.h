// Generated by gencpp from file vino_pipeline_srv_msgs/Pipelines.msg
// DO NOT EDIT!


#ifndef VINO_PIPELINE_SRV_MSGS_MESSAGE_PIPELINES_H
#define VINO_PIPELINE_SRV_MSGS_MESSAGE_PIPELINES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <vino_pipeline_srv_msgs/Pipeline.h>

namespace vino_pipeline_srv_msgs
{
template <class ContainerAllocator>
struct Pipelines_
{
  typedef Pipelines_<ContainerAllocator> Type;

  Pipelines_()
    : header()
    , name()
    , connections()
    , running_status()  {
    }
  Pipelines_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , name(_alloc)
    , connections(_alloc)
    , running_status(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef std::vector< ::vino_pipeline_srv_msgs::Pipeline_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::vino_pipeline_srv_msgs::Pipeline_<ContainerAllocator> >> _connections_type;
  _connections_type connections;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _running_status_type;
  _running_status_type running_status;





  typedef boost::shared_ptr< ::vino_pipeline_srv_msgs::Pipelines_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vino_pipeline_srv_msgs::Pipelines_<ContainerAllocator> const> ConstPtr;

}; // struct Pipelines_

typedef ::vino_pipeline_srv_msgs::Pipelines_<std::allocator<void> > Pipelines;

typedef boost::shared_ptr< ::vino_pipeline_srv_msgs::Pipelines > PipelinesPtr;
typedef boost::shared_ptr< ::vino_pipeline_srv_msgs::Pipelines const> PipelinesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vino_pipeline_srv_msgs::Pipelines_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vino_pipeline_srv_msgs::Pipelines_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vino_pipeline_srv_msgs::Pipelines_<ContainerAllocator1> & lhs, const ::vino_pipeline_srv_msgs::Pipelines_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.name == rhs.name &&
    lhs.connections == rhs.connections &&
    lhs.running_status == rhs.running_status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vino_pipeline_srv_msgs::Pipelines_<ContainerAllocator1> & lhs, const ::vino_pipeline_srv_msgs::Pipelines_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vino_pipeline_srv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vino_pipeline_srv_msgs::Pipelines_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vino_pipeline_srv_msgs::Pipelines_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vino_pipeline_srv_msgs::Pipelines_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vino_pipeline_srv_msgs::Pipelines_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vino_pipeline_srv_msgs::Pipelines_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vino_pipeline_srv_msgs::Pipelines_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vino_pipeline_srv_msgs::Pipelines_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a4c160876f63dd62c02cb0f61f036ec3";
  }

  static const char* value(const ::vino_pipeline_srv_msgs::Pipelines_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa4c160876f63dd62ULL;
  static const uint64_t static_value2 = 0xc02cb0f61f036ec3ULL;
};

template<class ContainerAllocator>
struct DataType< ::vino_pipeline_srv_msgs::Pipelines_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vino_pipeline_srv_msgs/Pipelines";
  }

  static const char* value(const ::vino_pipeline_srv_msgs::Pipelines_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vino_pipeline_srv_msgs::Pipelines_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Copyright (c) 2018 Intel Corporation\n"
"#\n"
"# Licensed under the Apache License, Version 2.0 (the \"License\");\n"
"# you may not use this file except in compliance with the License.\n"
"# You may obtain a copy of the License at\n"
"#\n"
"#      http://www.apache.org/licenses/LICENSE-2.0\n"
"#\n"
"# Unless required by applicable law or agreed to in writing, software\n"
"# distributed under the License is distributed on an \"AS IS\" BASIS,\n"
"# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
"# See the License for the specific language governing permissions and\n"
"# limitations under the License.\n"
"                      \n"
"std_msgs/Header header             # Header\n"
"string name                        # Name of pipeline\n"
"Pipeline[] connections             # connection map of a pipeline\n"
"string running_status              # Pipeline running state\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: vino_pipeline_srv_msgs/Pipeline\n"
"# Copyright (c) 2018 Intel Corporation\n"
"#\n"
"# Licensed under the Apache License, Version 2.0 (the \"License\");\n"
"# you may not use this file except in compliance with the License.\n"
"# You may obtain a copy of the License at\n"
"#\n"
"#      http://www.apache.org/licenses/LICENSE-2.0\n"
"#\n"
"# Unless required by applicable law or agreed to in writing, software\n"
"# distributed under the License is distributed on an \"AS IS\" BASIS,\n"
"# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
"# See the License for the specific language governing permissions and\n"
"# limitations under the License.\n"
"                      \n"
"string input                        # From\n"
"string output                       # To\n"
;
  }

  static const char* value(const ::vino_pipeline_srv_msgs::Pipelines_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vino_pipeline_srv_msgs::Pipelines_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.name);
      stream.next(m.connections);
      stream.next(m.running_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Pipelines_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vino_pipeline_srv_msgs::Pipelines_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vino_pipeline_srv_msgs::Pipelines_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "connections[]" << std::endl;
    for (size_t i = 0; i < v.connections.size(); ++i)
    {
      s << indent << "  connections[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::vino_pipeline_srv_msgs::Pipeline_<ContainerAllocator> >::stream(s, indent + "    ", v.connections[i]);
    }
    s << indent << "running_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.running_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VINO_PIPELINE_SRV_MSGS_MESSAGE_PIPELINES_H
