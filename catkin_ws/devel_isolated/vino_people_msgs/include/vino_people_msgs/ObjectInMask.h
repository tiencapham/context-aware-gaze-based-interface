// Generated by gencpp from file vino_people_msgs/ObjectInMask.msg
// DO NOT EDIT!


#ifndef VINO_PEOPLE_MSGS_MESSAGE_OBJECTINMASK_H
#define VINO_PEOPLE_MSGS_MESSAGE_OBJECTINMASK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sensor_msgs/RegionOfInterest.h>

namespace vino_people_msgs
{
template <class ContainerAllocator>
struct ObjectInMask_
{
  typedef ObjectInMask_<ContainerAllocator> Type;

  ObjectInMask_()
    : object_name()
    , probability(0.0)
    , roi()
    , mask_array()  {
    }
  ObjectInMask_(const ContainerAllocator& _alloc)
    : object_name(_alloc)
    , probability(0.0)
    , roi(_alloc)
    , mask_array(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _object_name_type;
  _object_name_type object_name;

   typedef float _probability_type;
  _probability_type probability;

   typedef  ::sensor_msgs::RegionOfInterest_<ContainerAllocator>  _roi_type;
  _roi_type roi;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _mask_array_type;
  _mask_array_type mask_array;





  typedef boost::shared_ptr< ::vino_people_msgs::ObjectInMask_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vino_people_msgs::ObjectInMask_<ContainerAllocator> const> ConstPtr;

}; // struct ObjectInMask_

typedef ::vino_people_msgs::ObjectInMask_<std::allocator<void> > ObjectInMask;

typedef boost::shared_ptr< ::vino_people_msgs::ObjectInMask > ObjectInMaskPtr;
typedef boost::shared_ptr< ::vino_people_msgs::ObjectInMask const> ObjectInMaskConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vino_people_msgs::ObjectInMask_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vino_people_msgs::ObjectInMask_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vino_people_msgs::ObjectInMask_<ContainerAllocator1> & lhs, const ::vino_people_msgs::ObjectInMask_<ContainerAllocator2> & rhs)
{
  return lhs.object_name == rhs.object_name &&
    lhs.probability == rhs.probability &&
    lhs.roi == rhs.roi &&
    lhs.mask_array == rhs.mask_array;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vino_people_msgs::ObjectInMask_<ContainerAllocator1> & lhs, const ::vino_people_msgs::ObjectInMask_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vino_people_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vino_people_msgs::ObjectInMask_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vino_people_msgs::ObjectInMask_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vino_people_msgs::ObjectInMask_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vino_people_msgs::ObjectInMask_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vino_people_msgs::ObjectInMask_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vino_people_msgs::ObjectInMask_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vino_people_msgs::ObjectInMask_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3e20660197c7e47461dcd1f01d571316";
  }

  static const char* value(const ::vino_people_msgs::ObjectInMask_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3e20660197c7e474ULL;
  static const uint64_t static_value2 = 0x61dcd1f01d571316ULL;
};

template<class ContainerAllocator>
struct DataType< ::vino_people_msgs::ObjectInMask_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vino_people_msgs/ObjectInMask";
  }

  static const char* value(const ::vino_people_msgs::ObjectInMask_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vino_people_msgs::ObjectInMask_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Copyright (c) 2017 Intel Corporation\n"
"#\n"
"# Licensed under the Apache License, Version 2.0 (the \"License\");\n"
"# you may not use this file except in compliance with the License.\n"
"# You may obtain a copy of the License at\n"
"#\n"
"#      http://www.apache.org/licenses/LICENSE-2.0\n"
"#\n"
"# Unless required by applicable law or agreed to in writing, software\n"
"# distributed under the License is distributed on an \"AS IS\" BASIS,\n"
"# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
"# See the License for the specific language governing permissions and\n"
"# limitations under the License.\n"
"\n"
"# This message can represent a detected object and its region of interest\n"
"string object_name  				# object name\n"
"float32 probability 				# probability of detected object\n"
"sensor_msgs/RegionOfInterest roi    # region of interest\n"
"float32[] mask_array				# Instance mask as Image\n"
"================================================================================\n"
"MSG: sensor_msgs/RegionOfInterest\n"
"# This message is used to specify a region of interest within an image.\n"
"#\n"
"# When used to specify the ROI setting of the camera when the image was\n"
"# taken, the height and width fields should either match the height and\n"
"# width fields for the associated image; or height = width = 0\n"
"# indicates that the full resolution image was captured.\n"
"\n"
"uint32 x_offset  # Leftmost pixel of the ROI\n"
"                 # (0 if the ROI includes the left edge of the image)\n"
"uint32 y_offset  # Topmost pixel of the ROI\n"
"                 # (0 if the ROI includes the top edge of the image)\n"
"uint32 height    # Height of ROI\n"
"uint32 width     # Width of ROI\n"
"\n"
"# True if a distinct rectified ROI should be calculated from the \"raw\"\n"
"# ROI in this message. Typically this should be False if the full image\n"
"# is captured (ROI not used), and True if a subwindow is captured (ROI\n"
"# used).\n"
"bool do_rectify\n"
;
  }

  static const char* value(const ::vino_people_msgs::ObjectInMask_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vino_people_msgs::ObjectInMask_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.object_name);
      stream.next(m.probability);
      stream.next(m.roi);
      stream.next(m.mask_array);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjectInMask_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vino_people_msgs::ObjectInMask_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vino_people_msgs::ObjectInMask_<ContainerAllocator>& v)
  {
    s << indent << "object_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.object_name);
    s << indent << "probability: ";
    Printer<float>::stream(s, indent + "  ", v.probability);
    s << indent << "roi: ";
    s << std::endl;
    Printer< ::sensor_msgs::RegionOfInterest_<ContainerAllocator> >::stream(s, indent + "  ", v.roi);
    s << indent << "mask_array[]" << std::endl;
    for (size_t i = 0; i < v.mask_array.size(); ++i)
    {
      s << indent << "  mask_array[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.mask_array[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // VINO_PEOPLE_MSGS_MESSAGE_OBJECTINMASK_H
