// Generated by gencpp from file vino_people_msgs/PeopleSrvRequest.msg
// DO NOT EDIT!


#ifndef VINO_PEOPLE_MSGS_MESSAGE_PEOPLESRVREQUEST_H
#define VINO_PEOPLE_MSGS_MESSAGE_PEOPLESRVREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vino_people_msgs
{
template <class ContainerAllocator>
struct PeopleSrvRequest_
{
  typedef PeopleSrvRequest_<ContainerAllocator> Type;

  PeopleSrvRequest_()
    : image_path()  {
    }
  PeopleSrvRequest_(const ContainerAllocator& _alloc)
    : image_path(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _image_path_type;
  _image_path_type image_path;





  typedef boost::shared_ptr< ::vino_people_msgs::PeopleSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vino_people_msgs::PeopleSrvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PeopleSrvRequest_

typedef ::vino_people_msgs::PeopleSrvRequest_<std::allocator<void> > PeopleSrvRequest;

typedef boost::shared_ptr< ::vino_people_msgs::PeopleSrvRequest > PeopleSrvRequestPtr;
typedef boost::shared_ptr< ::vino_people_msgs::PeopleSrvRequest const> PeopleSrvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vino_people_msgs::PeopleSrvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vino_people_msgs::PeopleSrvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vino_people_msgs::PeopleSrvRequest_<ContainerAllocator1> & lhs, const ::vino_people_msgs::PeopleSrvRequest_<ContainerAllocator2> & rhs)
{
  return lhs.image_path == rhs.image_path;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vino_people_msgs::PeopleSrvRequest_<ContainerAllocator1> & lhs, const ::vino_people_msgs::PeopleSrvRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vino_people_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vino_people_msgs::PeopleSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vino_people_msgs::PeopleSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vino_people_msgs::PeopleSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vino_people_msgs::PeopleSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vino_people_msgs::PeopleSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vino_people_msgs::PeopleSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vino_people_msgs::PeopleSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "65568c775bfbc96c6265c3d13d7e1a07";
  }

  static const char* value(const ::vino_people_msgs::PeopleSrvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x65568c775bfbc96cULL;
  static const uint64_t static_value2 = 0x6265c3d13d7e1a07ULL;
};

template<class ContainerAllocator>
struct DataType< ::vino_people_msgs::PeopleSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vino_people_msgs/PeopleSrvRequest";
  }

  static const char* value(const ::vino_people_msgs::PeopleSrvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vino_people_msgs::PeopleSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Copyright (c) 2018 Intel Corporation\n"
"#\n"
"# Licensed under the Apache License, Version 2.0 (the \"License\");\n"
"# you may not use this file except in compliance with the License.\n"
"# You may obtain a copy of the License at\n"
"#\n"
"#      http://www.apache.org/licenses/LICENSE-2.0\n"
"#\n"
"# Unless required by applicable law or agreed to in writing, software\n"
"# distributed under the License is distributed on an \"AS IS\" BASIS,\n"
"# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
"# See the License for the specific language governing permissions and\n"
"# limitations under the License.\n"
"\n"
"string image_path       # input: an image\n"
;
  }

  static const char* value(const ::vino_people_msgs::PeopleSrvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vino_people_msgs::PeopleSrvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.image_path);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PeopleSrvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vino_people_msgs::PeopleSrvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vino_people_msgs::PeopleSrvRequest_<ContainerAllocator>& v)
  {
    s << indent << "image_path: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.image_path);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VINO_PEOPLE_MSGS_MESSAGE_PEOPLESRVREQUEST_H
