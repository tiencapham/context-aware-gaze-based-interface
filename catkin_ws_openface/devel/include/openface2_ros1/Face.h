// Generated by gencpp from file openface2_ros1/Face.msg
// DO NOT EDIT!


#ifndef OPENFACE2_ROS1_MESSAGE_FACE_H
#define OPENFACE2_ROS1_MESSAGE_FACE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <openface2_ros1/ActionUnit.h>

namespace openface2_ros1
{
template <class ContainerAllocator>
struct Face_
{
  typedef Face_<ContainerAllocator> Type;

  Face_()
    : header()
    , left_gaze()
    , right_gaze()
    , gaze_angle()
    , head_pose()
    , landmarks_3d()
    , landmarks_2d()
    , action_units()  {
    }
  Face_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , left_gaze(_alloc)
    , right_gaze(_alloc)
    , gaze_angle(_alloc)
    , head_pose(_alloc)
    , landmarks_3d(_alloc)
    , landmarks_2d(_alloc)
    , action_units(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _left_gaze_type;
  _left_gaze_type left_gaze;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _right_gaze_type;
  _right_gaze_type right_gaze;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _gaze_angle_type;
  _gaze_angle_type gaze_angle;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _head_pose_type;
  _head_pose_type head_pose;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _landmarks_3d_type;
  _landmarks_3d_type landmarks_3d;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _landmarks_2d_type;
  _landmarks_2d_type landmarks_2d;

   typedef std::vector< ::openface2_ros1::ActionUnit_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::openface2_ros1::ActionUnit_<ContainerAllocator> >> _action_units_type;
  _action_units_type action_units;





  typedef boost::shared_ptr< ::openface2_ros1::Face_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::openface2_ros1::Face_<ContainerAllocator> const> ConstPtr;

}; // struct Face_

typedef ::openface2_ros1::Face_<std::allocator<void> > Face;

typedef boost::shared_ptr< ::openface2_ros1::Face > FacePtr;
typedef boost::shared_ptr< ::openface2_ros1::Face const> FaceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::openface2_ros1::Face_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::openface2_ros1::Face_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::openface2_ros1::Face_<ContainerAllocator1> & lhs, const ::openface2_ros1::Face_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.left_gaze == rhs.left_gaze &&
    lhs.right_gaze == rhs.right_gaze &&
    lhs.gaze_angle == rhs.gaze_angle &&
    lhs.head_pose == rhs.head_pose &&
    lhs.landmarks_3d == rhs.landmarks_3d &&
    lhs.landmarks_2d == rhs.landmarks_2d &&
    lhs.action_units == rhs.action_units;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::openface2_ros1::Face_<ContainerAllocator1> & lhs, const ::openface2_ros1::Face_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace openface2_ros1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::openface2_ros1::Face_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::openface2_ros1::Face_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::openface2_ros1::Face_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::openface2_ros1::Face_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::openface2_ros1::Face_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::openface2_ros1::Face_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::openface2_ros1::Face_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a3aa88b496bfcc332fcf7fef62b851c4";
  }

  static const char* value(const ::openface2_ros1::Face_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa3aa88b496bfcc33ULL;
  static const uint64_t static_value2 = 0x2fcf7fef62b851c4ULL;
};

template<class ContainerAllocator>
struct DataType< ::openface2_ros1::Face_<ContainerAllocator> >
{
  static const char* value()
  {
    return "openface2_ros1/Face";
  }

  static const char* value(const ::openface2_ros1::Face_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::openface2_ros1::Face_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"geometry_msgs/Pose left_gaze\n"
"geometry_msgs/Pose right_gaze\n"
"\n"
"geometry_msgs/Vector3 gaze_angle\n"
"\n"
"geometry_msgs/Pose head_pose\n"
"\n"
"geometry_msgs/Point[] landmarks_3d\n"
"geometry_msgs/Point[] landmarks_2d\n"
"\n"
"openface2_ros1/ActionUnit[] action_units\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: openface2_ros1/ActionUnit\n"
"string name\n"
"float64 presence\n"
"float64 intensity\n"
;
  }

  static const char* value(const ::openface2_ros1::Face_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::openface2_ros1::Face_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.left_gaze);
      stream.next(m.right_gaze);
      stream.next(m.gaze_angle);
      stream.next(m.head_pose);
      stream.next(m.landmarks_3d);
      stream.next(m.landmarks_2d);
      stream.next(m.action_units);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Face_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::openface2_ros1::Face_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::openface2_ros1::Face_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "left_gaze: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.left_gaze);
    s << indent << "right_gaze: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.right_gaze);
    s << indent << "gaze_angle: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.gaze_angle);
    s << indent << "head_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.head_pose);
    s << indent << "landmarks_3d[]" << std::endl;
    for (size_t i = 0; i < v.landmarks_3d.size(); ++i)
    {
      s << indent << "  landmarks_3d[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.landmarks_3d[i]);
    }
    s << indent << "landmarks_2d[]" << std::endl;
    for (size_t i = 0; i < v.landmarks_2d.size(); ++i)
    {
      s << indent << "  landmarks_2d[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.landmarks_2d[i]);
    }
    s << indent << "action_units[]" << std::endl;
    for (size_t i = 0; i < v.action_units.size(); ++i)
    {
      s << indent << "  action_units[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::openface2_ros1::ActionUnit_<ContainerAllocator> >::stream(s, indent + "    ", v.action_units[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPENFACE2_ROS1_MESSAGE_FACE_H
