// Generated by gencpp from file openface2_ros/ActionUnit.msg
// DO NOT EDIT!


#ifndef OPENFACE2_ROS_MESSAGE_ACTIONUNIT_H
#define OPENFACE2_ROS_MESSAGE_ACTIONUNIT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace openface2_ros
{
template <class ContainerAllocator>
struct ActionUnit_
{
  typedef ActionUnit_<ContainerAllocator> Type;

  ActionUnit_()
    : name()
    , presence(0.0)
    , intensity(0.0)  {
    }
  ActionUnit_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , presence(0.0)
    , intensity(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef double _presence_type;
  _presence_type presence;

   typedef double _intensity_type;
  _intensity_type intensity;





  typedef boost::shared_ptr< ::openface2_ros::ActionUnit_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::openface2_ros::ActionUnit_<ContainerAllocator> const> ConstPtr;

}; // struct ActionUnit_

typedef ::openface2_ros::ActionUnit_<std::allocator<void> > ActionUnit;

typedef boost::shared_ptr< ::openface2_ros::ActionUnit > ActionUnitPtr;
typedef boost::shared_ptr< ::openface2_ros::ActionUnit const> ActionUnitConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::openface2_ros::ActionUnit_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::openface2_ros::ActionUnit_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::openface2_ros::ActionUnit_<ContainerAllocator1> & lhs, const ::openface2_ros::ActionUnit_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.presence == rhs.presence &&
    lhs.intensity == rhs.intensity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::openface2_ros::ActionUnit_<ContainerAllocator1> & lhs, const ::openface2_ros::ActionUnit_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace openface2_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::openface2_ros::ActionUnit_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::openface2_ros::ActionUnit_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::openface2_ros::ActionUnit_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::openface2_ros::ActionUnit_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::openface2_ros::ActionUnit_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::openface2_ros::ActionUnit_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::openface2_ros::ActionUnit_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aa8dca63187d7a12cf7a6c27efaaaa8d";
  }

  static const char* value(const ::openface2_ros::ActionUnit_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaa8dca63187d7a12ULL;
  static const uint64_t static_value2 = 0xcf7a6c27efaaaa8dULL;
};

template<class ContainerAllocator>
struct DataType< ::openface2_ros::ActionUnit_<ContainerAllocator> >
{
  static const char* value()
  {
    return "openface2_ros/ActionUnit";
  }

  static const char* value(const ::openface2_ros::ActionUnit_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::openface2_ros::ActionUnit_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"float64 presence\n"
"float64 intensity\n"
;
  }

  static const char* value(const ::openface2_ros::ActionUnit_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::openface2_ros::ActionUnit_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.presence);
      stream.next(m.intensity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ActionUnit_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::openface2_ros::ActionUnit_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::openface2_ros::ActionUnit_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "presence: ";
    Printer<double>::stream(s, indent + "  ", v.presence);
    s << indent << "intensity: ";
    Printer<double>::stream(s, indent + "  ", v.intensity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPENFACE2_ROS_MESSAGE_ACTIONUNIT_H
